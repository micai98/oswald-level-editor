<?xml version="1.0" encoding="UTF-8"?><tululoo version="130" uid="32" title="" advancedscriptmode="0" imgfolder="img" audfolder="aud"><functions>// FUNNY OVERRIDES OF ENGINE'S FUNCTIONS
function __mousemovelistener__(_e) {
	let _r = tu_canvas.getBoundingClientRect();
	mouse_x = ((_e.clientX - _r.left)/(_r.right - _r.left)) * tu_canvas.width;
	mouse_y = ((_e.clientY - _r.top)/(_r.bottom - _r.top)) * tu_canvas.height;
	if (mouse_down) __touchsim__(mouse_x, mouse_y);
};

var keyboard_string = "";
var keyboard_char = " ";
var keyboard_realchar = " ";

function __keydownlistener__(e) {
	var r = true;
	if (!e) e = window.event;
	if (document.activeElement &amp;&amp; document.activeElement == tu_canvas || document.activeElement == document.body) r = false;
	if (e.repeat) return;
	var keyCode = window.event ? e.which : e.keyCode;
	if (!key_down[keyCode]) {
		key_pressed[keyCode] = true;
		tu_keys_pressed.push(keyCode);
		keyboard_realchar = e.key;
		keyboard_string = keyboard_string.concat(keyboard_char);
		if(keyboard_realchar.length == 1) keyboard_char = keyboard_realchar;
	}
	key_down[keyCode] = true;
	if (!r) e.preventDefault();
	return r;
};

// detect whether the tab is focused
document.addEventListener("visibilitychange", (event) =&gt; {
	if (document.visibilityState == "visible") {
		//editor_paused = false;
	} else {
		//editor_paused = true;
	}
});</functions><variables>// OSWALD LEVEL EDITOR BY MICAI
var camx = 320;
var lvlend = 320;
var lvlheight = 10;
var lvloutput = "";
var lvloutput_pretty = "";
var clear = false;
var editor_paused = false;
var game_url = "https://oswaldgame.netlify.app/play.html";
var helitest = false;
var watertest = false;
var speedtest1 = false;
var speedtest2 = false;
var compress_levels = false;

function levelSave() {
	let lvlen = lvlend/16;
	let row = [];
	for(let i = 0; i &lt; lvlen; i++) row.push(".");
	let rows = [];
	for(let i = 0; i &lt; lvlheight; i++) rows.push(row.slice());
	let list = instance_list(o_le_entity);
	let num = list.length;
	
	
	for(let i = 0; i &lt; num; i++) {
		let s = list[i]
		let sx = s.x / 16;
		let sy = s.y / 16;
		if(sx &lt; lvlen &amp;&amp; sx &gt;= 0 &amp;&amp; sy &lt; lvlheight &amp;&amp; sy &gt;= 0) rows[sy][sx] = s.char;
	}
	
	for(let i = 0; i &lt; lvlheight; i++) {
		rows[i] = rows[i].join("");
		if(compress_levels) rows[i] = rows[i].replaceAll(".....", "&amp;");
	}
	
	lvloutput = rows.join(",");
	lvloutput_pretty = rows.join(",\r\n");
	if(domoLvlOutput) domoLvlOutput.value = lvloutput_pretty;
	if(domoLvlOutput) domoLvlOutput.innerHTML = lvloutput_pretty;
	if(domoLvlOutput) domoLvlOutput.innerText = lvloutput_pretty;
}

function levelLoad(lvl="") {
	levelClear();
	lvlend = 1;
	var lvl = lvl.replace(/(\r\n|\n|\r|\\)/gm, "")
	var len = lvl.length;
	var cx = 0;
	var cy = 0;
	var ce = "";
	for(i=0; i&lt;=len-1; i++) {
		ce = lvl[i];
		if(ce == ".") cx += 1;
		else if(ce == "&amp;") cx += 5;
		else if (ce == ",") {
			if(cx*16 &gt; lvlend) lvlend = cx*16;
			cx = 0; 
			cy += 1;
		} 
		else {
			var nw = instance_create(cx*16, cy*16, o_le_entity);
			nw.char = ce;
			nw.init();
			cx += 1;
		}
	}
}

function levelClear() {
	let list = instance_list(o_le_entity);
	let num = list.length;
	for(let i=0; i&lt;num; i++) {
		list[i].delete = true;
	}
}

function levelPlay() {
	let spd = 0;
	if(speedtest1 == true) spd = 2.0;
	if(speedtest2 == true) spd = 2.3;
	window.open(game_url + "?prefabtest="+lvloutput.replaceAll("+", "%2B") + ((helitest == true) ? "&amp;helitest" : "") + ((watertest == true) ? "&amp;watertest" : "") + ((spd != 0) ? "&amp;speedtest="+spd.toString() : ""), '_blank').focus();
}

var domoKeyboardString = document.getElementById("domo_keyboardstring");
var domoKeyboardChar = document.getElementById("domo_keyboardchar");
var domoObjectsPlaced = document.getElementById("domo_objectsplaced");
var domoCamx = document.getElementById("domo_camx");
var domoLvlOutput = document.getElementById("domo_lvloutput");

function domoUpdate() {
	if(domoKeyboardString) domoKeyboardString.innerHTML = keyboard_string;
	if(domoKeyboardChar) domoKeyboardChar.innerHTML = keyboard_char;
	if(domoCamx) domoCamx.innerHTML = (camx-(room_viewport_width/2)).toString() + " / " + (room_width - room_viewport_width).toString();
	if(domoObjectsPlaced) domoObjectsPlaced.innerHTML = instance_number(o_le_entity);
	
	if(keyboard_char in colorTable) {
		domoKeyboardChar.style.backgroundColor = "rgb(" + colorTable[keyboard_char][0] + "," + colorTable[keyboard_char][1] + "," + colorTable[keyboard_char][2] + ")";
	} else {
		if(is_upper(keyboard_char)) {
			domoKeyboardChar.style.backgroundColor = "rgb(20,200,20)";
		} else domoKeyboardChar.style.backgroundColor = "rgb(150,50,50)";
	}
	
	if(keyboard_char == " ") {
		domoKeyboardChar.innerHTML = ".";
		domoKeyboardChar.style.backgroundColor = "rgb(150,150,150)";
	}
	
	if(keyboard_char.length != 1) {
		domoKeyboardChar.innerHTML = " ";
		domoKeyboardChar.style.backgroundColor = "rgb(100,100,100)";
	}
}

function domoClearOutput() {
	if(domoLvlOutput) domoLvlOutput.value = "";
	if(domoLvlOutput) domoLvlOutput.innerHTML = "";
	if(domoLvlOutput) domoLvlOutput.innerText = "";
}

function domoCopyOutput() {
	if(!domoLvlOutput) return;
	domoLvlOutput.select();
	domoLvlOutput.setSelectionRange(0, 99999);
	document.execCommand("copy");
}

var sizeTable = {
	"-": [32, 16],  // platforms
	"+": [32, 16],
	"=": [32, 16],
	"^": [32, 16],
	"v": [32, 16],
	"&lt;": [32, 16],
	"&gt;": [32, 16],

	"H": [32, 32],  // huge
	"J": [32, 32],  // huge
	"g": [32, 32],  // huge
	
	"p": [32, 16], // crusher
	"n": [64, 16], // sign
};

var colorTable = {
	" ": [150, 150, 150],
	".": [150, 150, 150],
	",": [100, 100, 100],
	"&amp;": [100, 100, 100],
	"\\": [100, 100, 100],
	"\"": [100, 100, 100],
	"'": [100, 100, 100],
	"P": [20,250,40], // pipe


	"+": [10, 100, 10],
	"=": [10, 100, 10],
	"-": [10, 100, 10],
	"^": [10, 100, 10],
	"v": [10, 100, 10],
	"V": [30, 100, 30],
	"&lt;": [10, 100, 10],
	"&gt;": [10, 100, 10],
	"|": [10, 70, 10],
	
	"(": [80, 120, 10],
	")": [80, 120, 10],

	"c": [200, 200, 10], // coin
	"Q": [200, 150, 10], // coinblock
	"O": [170, 120, 0], // coinblock
	"t": [50, 10, 150], // trampoline
	"_": [80, 125, 200], // jumpboost
	"$": [123, 123, 10], // sandstorm
	"`": [200, 10, 200], // entity mod
	
	"h": [20, 200, 200], // heli
	"n": [10, 120, 120], // noheli
	
	"w": [50, 50, 200], // water
	"{": [70, 70, 250], // watercurrent
	"}": [70, 70, 250], // watercurrent
	"[": [70, 70, 250], // watercurrent
	"]": [70, 70, 250], // watercurrent
	
	//enemies that dont get their right colour assigned automatically
	";": [150,50,50],
	":": [150,50,50],
	"!": [150,50,50],
	"%": [150,50,50],
	"@": [150,50,50],
}</variables><comments/><sprites count="2"><sprite name="col_16x" centerx="0" centery="0" collisionshape="Box" collisionradius="8" collisionleft="0" collisionright="16" collisiontop="0" collisionbottom="16"/><sprite name="s_le_cursor" centerx="0" centery="0" collisionshape="Box" collisionradius="8" collisionleft="0" collisionright="16" collisiontop="0" collisionbottom="16"/></sprites><frames count="2"><frame file="0" sprite="col_16x"/><frame file="0" sprite="s_le_cursor"/></frames><sounds count="0"/><musics count="0"/><backgrounds count="1"><background name="bg_grid" file="bg_grid.png" tile="0" tileheight="32" tilewidth="32" tilexoffset="0" tileyoffset="0" tilexspace="0" tileyspace="0"/></backgrounds><fonts count="0"/><objects count="4"><object name="o_le_entity" template="" prototype="1" scene="" sprite="col_16x" x="0" y="0" visible="1" depth="5" collision="1" parent="" direction="0" image_angle="0"/><object name="o_main" template="" prototype="1" scene="" sprite="s_le_cursor" x="0" y="0" visible="1" depth="0" collision="1" parent="" direction="0" image_angle="0"/><object name="SceneObject17" template="o_main" prototype="0" scene="s_main" sprite="s_le_cursor" x="0" y="0" visible="0" depth="0" collision="0" parent="" direction="0" image_angle="0"/><object name="o_camera" template="" prototype="1" scene="" sprite="" x="0" y="0" visible="0" depth="0" collision="1" parent="" direction="0" image_angle="0"/></objects><scripts count="8"><script name="scr_8" object="o_le_entity" event="Draw" parameter="">draw_set_alpha(0.5);
draw_set_color(this.color_r, this.color_g, this.color_b);
draw_rectangle(x, y, x+this.xsize, y+this.ysize);

draw_set_alpha(1);
draw_set_color(5,5,5);
draw_text(x+3, y+3, this.char);
draw_set_color(255,255,255);
draw_text(x+2, y+2, this.char);



</script><script name="scr_12" object="o_main" event="Draw" parameter="">draw_set_alpha(1);
draw_sprite(s_le_cursor, 0, curx, cury);
draw_set_color(0,0,0);
draw_line(lvlend, 0, lvlend, room_height);


if(editor_paused) {
	draw_set_alpha(0.5);
	draw_set_color(100, 100, 100);
	draw_rectangle(room_viewport_x, room_viewport_y, room_viewport_x+room_viewport_width, room_viewport_y+room_viewport_height);

	draw_set_alpha(1);
	draw_set_color(255, 255, 255);
	draw_set_halign(fa_center);
	draw_text(room_viewport_x+(room_viewport_width/2), room_viewport_y+(room_viewport_height/2), "Editor paused. Click the 'Pause' button to resume.");
	draw_set_halign(fa_left);
}</script><script name="scr_13" object="o_main" event="Step" parameter="">if(editor_paused || !document.hasFocus()) return;

curx = room_viewport_x + floor(mouse_x/16)*16;
cury = room_viewport_y + floor(mouse_y/16)*16;

selob = place_meeting(curx, cury, o_le_entity);

if(keyboard_check(vk_ctrl)) {
	if(selob != null) selob.instance_destroy();
}

if(keyboard_check_pressed(vk_end)) lvlend = curx;

if(mouse_check() &amp;&amp; !keyboard_check(vk_ctrl)) {
	if(keyboard_char.length != 1) return;
	if(curx &gt; room_width-16 || curx &lt; 0) return;
	if(cury &gt; room_height-16 || cury &lt; 0) return;

	
	if(selob != null) selob.instance_destroy();
	if(keyboard_char == " " || keyboard_char == "." || keyboard_char == "," || keyboard_char == "'" || keyboard_char == "\"" || keyboard_char == "\\") return;
	
	let newob = instance_create(curx, cury, o_le_entity);
	newob.char = keyboard_char;
	newob.init();
}

domoUpdate();</script><script name="scr_14" object="o_main" event="Creation" parameter="">instance_create(0, 0, o_camera);
var curx = 0;
var cury = 0;
var selob = null;</script><script name="scr_15" object="o_le_entity" event="Creation" parameter="">this.char = "0"
this.xsize = 16;
this.ysize = 16;
this.delete = false;

this.init = function() {
	// color
	if(this.char in colorTable) {
		this.color_r = colorTable[this.char][0];
		this.color_g = colorTable[this.char][1];
		this.color_b = colorTable[this.char][2];
	} else {
		if(is_upper(this.char)) {
			this.color_r = 20;
			this.color_g = 200;
			this.color_b = 20;
		} else {
			this.color_r = 150;
			this.color_g = 50;
			this.color_b = 50;
		}
	}

	if(this.char in sizeTable) {
		this.xsize = sizeTable[this.char][0];
		this.ysize = sizeTable[this.char][1];
	}
}

this.clear = function() {
	instance_destroy();
}

this.init();



</script><script name="scr_25" object="o_le_entity" event="Step" parameter="">if(this.delete == true) {
	instance_destroy();
}

if(keyboard_check(vk_shift)) {
	if(keyboard_check_pressed(vk_left)) x -= 16;
	if(keyboard_check_pressed(vk_right)) x += 16;
	if(keyboard_check_pressed(vk_up)) y -= 16;
	if(keyboard_check_pressed(vk_down)) y += 16;
}</script><script name="scr_31" object="o_camera" event="Step" parameter="">if(editor_paused || !document.hasFocus()) return;
camx = x;

if(keyboard_check(vk_left) &amp;&amp; !keyboard_check(vk_shift)) {
	if(x &gt; room_viewport_width/2) x -= 16;
}

if(keyboard_check(vk_right) &amp;&amp; !keyboard_check(vk_shift)) {
	if(x &lt; room_width-room_viewport_width/2) x += 16;
}</script><script name="scr_32" object="o_camera" event="Creation" parameter="">x = 320;
y = 0;</script></scripts><scenes count="1"><scene name="s_main" width="1920" height="160" speed="60" red="209" green="209" blue="209" background="bg_grid" backgroundstretch="0" backgroundtilex="1" backgroundtiley="1" viewportwidth="640" viewportheight="160" viewportxborder="640" viewportyborder="50" viewportobject="o_camera"/></scenes><layers count="1"><layer name="layer_4" scene="s_main" value="1000000"/></layers><tiles count="0"/><fns count="1"><fn name="is_upper" params="t" description="">return t == t.toUpperCase();</fn></fns></tululoo>